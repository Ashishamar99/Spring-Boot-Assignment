/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2739.0, "series": [{"data": [[0.0, 2.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 3.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 3.0], [1.9, 3.0], [2.0, 4.0], [2.1, 4.0], [2.2, 4.0], [2.3, 4.0], [2.4, 4.0], [2.5, 4.0], [2.6, 4.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 12.0], [3.3, 12.0], [3.4, 25.0], [3.5, 29.0], [3.6, 33.0], [3.7, 34.0], [3.8, 35.0], [3.9, 45.0], [4.0, 46.0], [4.1, 46.0], [4.2, 49.0], [4.3, 50.0], [4.4, 52.0], [4.5, 54.0], [4.6, 54.0], [4.7, 54.0], [4.8, 54.0], [4.9, 55.0], [5.0, 55.0], [5.1, 55.0], [5.2, 56.0], [5.3, 56.0], [5.4, 56.0], [5.5, 58.0], [5.6, 58.0], [5.7, 59.0], [5.8, 59.0], [5.9, 59.0], [6.0, 59.0], [6.1, 62.0], [6.2, 62.0], [6.3, 62.0], [6.4, 64.0], [6.5, 64.0], [6.6, 64.0], [6.7, 67.0], [6.8, 67.0], [6.9, 70.0], [7.0, 72.0], [7.1, 73.0], [7.2, 75.0], [7.3, 75.0], [7.4, 75.0], [7.5, 75.0], [7.6, 76.0], [7.7, 76.0], [7.8, 76.0], [7.9, 76.0], [8.0, 77.0], [8.1, 77.0], [8.2, 78.0], [8.3, 79.0], [8.4, 80.0], [8.5, 81.0], [8.6, 83.0], [8.7, 85.0], [8.8, 86.0], [8.9, 87.0], [9.0, 88.0], [9.1, 90.0], [9.2, 94.0], [9.3, 96.0], [9.4, 97.0], [9.5, 100.0], [9.6, 102.0], [9.7, 104.0], [9.8, 105.0], [9.9, 105.0], [10.0, 105.0], [10.1, 105.0], [10.2, 108.0], [10.3, 109.0], [10.4, 110.0], [10.5, 110.0], [10.6, 110.0], [10.7, 110.0], [10.8, 112.0], [10.9, 112.0], [11.0, 113.0], [11.1, 117.0], [11.2, 120.0], [11.3, 123.0], [11.4, 124.0], [11.5, 126.0], [11.6, 136.0], [11.7, 147.0], [11.8, 150.0], [11.9, 156.0], [12.0, 160.0], [12.1, 172.0], [12.2, 174.0], [12.3, 180.0], [12.4, 208.0], [12.5, 227.0], [12.6, 229.0], [12.7, 235.0], [12.8, 236.0], [12.9, 242.0], [13.0, 247.0], [13.1, 258.0], [13.2, 264.0], [13.3, 276.0], [13.4, 283.0], [13.5, 284.0], [13.6, 287.0], [13.7, 288.0], [13.8, 290.0], [13.9, 297.0], [14.0, 305.0], [14.1, 306.0], [14.2, 307.0], [14.3, 308.0], [14.4, 310.0], [14.5, 311.0], [14.6, 317.0], [14.7, 322.0], [14.8, 322.0], [14.9, 322.0], [15.0, 322.0], [15.1, 322.0], [15.2, 323.0], [15.3, 326.0], [15.4, 337.0], [15.5, 341.0], [15.6, 342.0], [15.7, 343.0], [15.8, 344.0], [15.9, 345.0], [16.0, 346.0], [16.1, 348.0], [16.2, 349.0], [16.3, 352.0], [16.4, 353.0], [16.5, 355.0], [16.6, 369.0], [16.7, 377.0], [16.8, 383.0], [16.9, 383.0], [17.0, 385.0], [17.1, 389.0], [17.2, 415.0], [17.3, 426.0], [17.4, 460.0], [17.5, 462.0], [17.6, 465.0], [17.7, 466.0], [17.8, 466.0], [17.9, 469.0], [18.0, 473.0], [18.1, 476.0], [18.2, 478.0], [18.3, 478.0], [18.4, 481.0], [18.5, 481.0], [18.6, 481.0], [18.7, 481.0], [18.8, 482.0], [18.9, 483.0], [19.0, 484.0], [19.1, 484.0], [19.2, 486.0], [19.3, 488.0], [19.4, 488.0], [19.5, 489.0], [19.6, 490.0], [19.7, 492.0], [19.8, 494.0], [19.9, 494.0], [20.0, 494.0], [20.1, 496.0], [20.2, 497.0], [20.3, 498.0], [20.4, 501.0], [20.5, 506.0], [20.6, 506.0], [20.7, 508.0], [20.8, 508.0], [20.9, 509.0], [21.0, 510.0], [21.1, 510.0], [21.2, 510.0], [21.3, 510.0], [21.4, 511.0], [21.5, 511.0], [21.6, 511.0], [21.7, 514.0], [21.8, 516.0], [21.9, 518.0], [22.0, 518.0], [22.1, 518.0], [22.2, 518.0], [22.3, 519.0], [22.4, 520.0], [22.5, 520.0], [22.6, 520.0], [22.7, 522.0], [22.8, 524.0], [22.9, 526.0], [23.0, 555.0], [23.1, 581.0], [23.2, 585.0], [23.3, 598.0], [23.4, 603.0], [23.5, 617.0], [23.6, 619.0], [23.7, 620.0], [23.8, 621.0], [23.9, 622.0], [24.0, 623.0], [24.1, 623.0], [24.2, 623.0], [24.3, 623.0], [24.4, 625.0], [24.5, 625.0], [24.6, 626.0], [24.7, 627.0], [24.8, 627.0], [24.9, 628.0], [25.0, 629.0], [25.1, 629.0], [25.2, 629.0], [25.3, 633.0], [25.4, 636.0], [25.5, 637.0], [25.6, 642.0], [25.7, 646.0], [25.8, 646.0], [25.9, 649.0], [26.0, 651.0], [26.1, 651.0], [26.2, 651.0], [26.3, 655.0], [26.4, 657.0], [26.5, 657.0], [26.6, 658.0], [26.7, 658.0], [26.8, 659.0], [26.9, 660.0], [27.0, 660.0], [27.1, 660.0], [27.2, 662.0], [27.3, 664.0], [27.4, 665.0], [27.5, 665.0], [27.6, 667.0], [27.7, 670.0], [27.8, 673.0], [27.9, 676.0], [28.0, 679.0], [28.1, 679.0], [28.2, 689.0], [28.3, 691.0], [28.4, 697.0], [28.5, 697.0], [28.6, 701.0], [28.7, 709.0], [28.8, 709.0], [28.9, 713.0], [29.0, 723.0], [29.1, 724.0], [29.2, 728.0], [29.3, 732.0], [29.4, 733.0], [29.5, 740.0], [29.6, 743.0], [29.7, 745.0], [29.8, 752.0], [29.9, 752.0], [30.0, 755.0], [30.1, 755.0], [30.2, 760.0], [30.3, 765.0], [30.4, 768.0], [30.5, 772.0], [30.6, 772.0], [30.7, 778.0], [30.8, 780.0], [30.9, 789.0], [31.0, 789.0], [31.1, 789.0], [31.2, 790.0], [31.3, 793.0], [31.4, 793.0], [31.5, 794.0], [31.6, 794.0], [31.7, 794.0], [31.8, 795.0], [31.9, 795.0], [32.0, 803.0], [32.1, 804.0], [32.2, 808.0], [32.3, 832.0], [32.4, 835.0], [32.5, 852.0], [32.6, 866.0], [32.7, 866.0], [32.8, 867.0], [32.9, 872.0], [33.0, 874.0], [33.1, 876.0], [33.2, 877.0], [33.3, 885.0], [33.4, 891.0], [33.5, 896.0], [33.6, 901.0], [33.7, 903.0], [33.8, 903.0], [33.9, 949.0], [34.0, 962.0], [34.1, 972.0], [34.2, 972.0], [34.3, 974.0], [34.4, 980.0], [34.5, 985.0], [34.6, 988.0], [34.7, 1005.0], [34.8, 1022.0], [34.9, 1024.0], [35.0, 1026.0], [35.1, 1027.0], [35.2, 1027.0], [35.3, 1029.0], [35.4, 1031.0], [35.5, 1031.0], [35.6, 1032.0], [35.7, 1032.0], [35.8, 1033.0], [35.9, 1034.0], [36.0, 1034.0], [36.1, 1035.0], [36.2, 1035.0], [36.3, 1035.0], [36.4, 1036.0], [36.5, 1036.0], [36.6, 1037.0], [36.7, 1038.0], [36.8, 1039.0], [36.9, 1039.0], [37.0, 1040.0], [37.1, 1041.0], [37.2, 1042.0], [37.3, 1042.0], [37.4, 1043.0], [37.5, 1043.0], [37.6, 1044.0], [37.7, 1047.0], [37.8, 1048.0], [37.9, 1059.0], [38.0, 1061.0], [38.1, 1062.0], [38.2, 1064.0], [38.3, 1069.0], [38.4, 1069.0], [38.5, 1069.0], [38.6, 1070.0], [38.7, 1072.0], [38.8, 1074.0], [38.9, 1076.0], [39.0, 1081.0], [39.1, 1081.0], [39.2, 1081.0], [39.3, 1081.0], [39.4, 1081.0], [39.5, 1082.0], [39.6, 1084.0], [39.7, 1084.0], [39.8, 1087.0], [39.9, 1087.0], [40.0, 1088.0], [40.1, 1090.0], [40.2, 1092.0], [40.3, 1093.0], [40.4, 1093.0], [40.5, 1094.0], [40.6, 1095.0], [40.7, 1095.0], [40.8, 1096.0], [40.9, 1097.0], [41.0, 1105.0], [41.1, 1117.0], [41.2, 1133.0], [41.3, 1133.0], [41.4, 1136.0], [41.5, 1140.0], [41.6, 1141.0], [41.7, 1142.0], [41.8, 1144.0], [41.9, 1148.0], [42.0, 1149.0], [42.1, 1155.0], [42.2, 1156.0], [42.3, 1156.0], [42.4, 1157.0], [42.5, 1158.0], [42.6, 1159.0], [42.7, 1159.0], [42.8, 1162.0], [42.9, 1163.0], [43.0, 1165.0], [43.1, 1165.0], [43.2, 1169.0], [43.3, 1171.0], [43.4, 1171.0], [43.5, 1175.0], [43.6, 1176.0], [43.7, 1177.0], [43.8, 1182.0], [43.9, 1186.0], [44.0, 1189.0], [44.1, 1189.0], [44.2, 1189.0], [44.3, 1196.0], [44.4, 1204.0], [44.5, 1219.0], [44.6, 1229.0], [44.7, 1231.0], [44.8, 1231.0], [44.9, 1236.0], [45.0, 1236.0], [45.1, 1236.0], [45.2, 1237.0], [45.3, 1237.0], [45.4, 1239.0], [45.5, 1240.0], [45.6, 1244.0], [45.7, 1253.0], [45.8, 1255.0], [45.9, 1260.0], [46.0, 1260.0], [46.1, 1295.0], [46.2, 1302.0], [46.3, 1319.0], [46.4, 1324.0], [46.5, 1325.0], [46.6, 1327.0], [46.7, 1328.0], [46.8, 1331.0], [46.9, 1331.0], [47.0, 1334.0], [47.1, 1336.0], [47.2, 1341.0], [47.3, 1344.0], [47.4, 1344.0], [47.5, 1346.0], [47.6, 1363.0], [47.7, 1381.0], [47.8, 1388.0], [47.9, 1411.0], [48.0, 1437.0], [48.1, 1449.0], [48.2, 1469.0], [48.3, 1472.0], [48.4, 1495.0], [48.5, 1496.0], [48.6, 1517.0], [48.7, 1519.0], [48.8, 1529.0], [48.9, 1534.0], [49.0, 1534.0], [49.1, 1535.0], [49.2, 1535.0], [49.3, 1537.0], [49.4, 1537.0], [49.5, 1537.0], [49.6, 1538.0], [49.7, 1538.0], [49.8, 1539.0], [49.9, 1539.0], [50.0, 1539.0], [50.1, 1539.0], [50.2, 1539.0], [50.3, 1540.0], [50.4, 1541.0], [50.5, 1541.0], [50.6, 1541.0], [50.7, 1541.0], [50.8, 1542.0], [50.9, 1542.0], [51.0, 1542.0], [51.1, 1542.0], [51.2, 1543.0], [51.3, 1543.0], [51.4, 1544.0], [51.5, 1544.0], [51.6, 1544.0], [51.7, 1545.0], [51.8, 1545.0], [51.9, 1545.0], [52.0, 1546.0], [52.1, 1547.0], [52.2, 1547.0], [52.3, 1547.0], [52.4, 1547.0], [52.5, 1548.0], [52.6, 1548.0], [52.7, 1548.0], [52.8, 1548.0], [52.9, 1549.0], [53.0, 1549.0], [53.1, 1550.0], [53.2, 1550.0], [53.3, 1550.0], [53.4, 1550.0], [53.5, 1550.0], [53.6, 1552.0], [53.7, 1553.0], [53.8, 1554.0], [53.9, 1554.0], [54.0, 1554.0], [54.1, 1555.0], [54.2, 1556.0], [54.3, 1556.0], [54.4, 1556.0], [54.5, 1557.0], [54.6, 1557.0], [54.7, 1558.0], [54.8, 1558.0], [54.9, 1558.0], [55.0, 1558.0], [55.1, 1559.0], [55.2, 1559.0], [55.3, 1559.0], [55.4, 1560.0], [55.5, 1560.0], [55.6, 1560.0], [55.7, 1562.0], [55.8, 1562.0], [55.9, 1562.0], [56.0, 1562.0], [56.1, 1563.0], [56.2, 1563.0], [56.3, 1563.0], [56.4, 1563.0], [56.5, 1564.0], [56.6, 1565.0], [56.7, 1565.0], [56.8, 1566.0], [56.9, 1566.0], [57.0, 1567.0], [57.1, 1567.0], [57.2, 1567.0], [57.3, 1567.0], [57.4, 1568.0], [57.5, 1568.0], [57.6, 1568.0], [57.7, 1569.0], [57.8, 1569.0], [57.9, 1569.0], [58.0, 1570.0], [58.1, 1570.0], [58.2, 1571.0], [58.3, 1571.0], [58.4, 1572.0], [58.5, 1572.0], [58.6, 1572.0], [58.7, 1572.0], [58.8, 1573.0], [58.9, 1574.0], [59.0, 1575.0], [59.1, 1576.0], [59.2, 1576.0], [59.3, 1577.0], [59.4, 1577.0], [59.5, 1578.0], [59.6, 1579.0], [59.7, 1579.0], [59.8, 1580.0], [59.9, 1580.0], [60.0, 1581.0], [60.1, 1581.0], [60.2, 1582.0], [60.3, 1582.0], [60.4, 1582.0], [60.5, 1583.0], [60.6, 1584.0], [60.7, 1585.0], [60.8, 1586.0], [60.9, 1589.0], [61.0, 1591.0], [61.1, 1592.0], [61.2, 1593.0], [61.3, 1594.0], [61.4, 1596.0], [61.5, 1597.0], [61.6, 1597.0], [61.7, 1597.0], [61.8, 1598.0], [61.9, 1602.0], [62.0, 1602.0], [62.1, 1604.0], [62.2, 1604.0], [62.3, 1605.0], [62.4, 1608.0], [62.5, 1609.0], [62.6, 1609.0], [62.7, 1612.0], [62.8, 1614.0], [62.9, 1616.0], [63.0, 1618.0], [63.1, 1621.0], [63.2, 1629.0], [63.3, 1630.0], [63.4, 1630.0], [63.5, 1631.0], [63.6, 1633.0], [63.7, 1636.0], [63.8, 1637.0], [63.9, 1637.0], [64.0, 1641.0], [64.1, 1642.0], [64.2, 1644.0], [64.3, 1644.0], [64.4, 1647.0], [64.5, 1647.0], [64.6, 1648.0], [64.7, 1651.0], [64.8, 1651.0], [64.9, 1651.0], [65.0, 1653.0], [65.1, 1654.0], [65.2, 1654.0], [65.3, 1654.0], [65.4, 1656.0], [65.5, 1657.0], [65.6, 1657.0], [65.7, 1659.0], [65.8, 1661.0], [65.9, 1661.0], [66.0, 1661.0], [66.1, 1661.0], [66.2, 1662.0], [66.3, 1665.0], [66.4, 1667.0], [66.5, 1668.0], [66.6, 1669.0], [66.7, 1671.0], [66.8, 1671.0], [66.9, 1674.0], [67.0, 1675.0], [67.1, 1677.0], [67.2, 1677.0], [67.3, 1679.0], [67.4, 1679.0], [67.5, 1680.0], [67.6, 1680.0], [67.7, 1681.0], [67.8, 1684.0], [67.9, 1685.0], [68.0, 1688.0], [68.1, 1691.0], [68.2, 1696.0], [68.3, 1698.0], [68.4, 1699.0], [68.5, 1699.0], [68.6, 1700.0], [68.7, 1701.0], [68.8, 1701.0], [68.9, 1703.0], [69.0, 1703.0], [69.1, 1704.0], [69.2, 1704.0], [69.3, 1706.0], [69.4, 1707.0], [69.5, 1707.0], [69.6, 1709.0], [69.7, 1709.0], [69.8, 1709.0], [69.9, 1710.0], [70.0, 1711.0], [70.1, 1713.0], [70.2, 1713.0], [70.3, 1716.0], [70.4, 1716.0], [70.5, 1719.0], [70.6, 1719.0], [70.7, 1721.0], [70.8, 1727.0], [70.9, 1739.0], [71.0, 1741.0], [71.1, 1753.0], [71.2, 1759.0], [71.3, 1761.0], [71.4, 1761.0], [71.5, 1765.0], [71.6, 1765.0], [71.7, 1768.0], [71.8, 1769.0], [71.9, 1771.0], [72.0, 1772.0], [72.1, 1773.0], [72.2, 1774.0], [72.3, 1774.0], [72.4, 1779.0], [72.5, 1785.0], [72.6, 1793.0], [72.7, 1797.0], [72.8, 1799.0], [72.9, 1805.0], [73.0, 1805.0], [73.1, 1810.0], [73.2, 1813.0], [73.3, 1820.0], [73.4, 1826.0], [73.5, 1832.0], [73.6, 1833.0], [73.7, 1837.0], [73.8, 1843.0], [73.9, 1843.0], [74.0, 1845.0], [74.1, 1848.0], [74.2, 1851.0], [74.3, 1855.0], [74.4, 1859.0], [74.5, 1864.0], [74.6, 1866.0], [74.7, 1875.0], [74.8, 1883.0], [74.9, 1887.0], [75.0, 1900.0], [75.1, 1901.0], [75.2, 1903.0], [75.3, 1907.0], [75.4, 1908.0], [75.5, 1915.0], [75.6, 1916.0], [75.7, 1922.0], [75.8, 1922.0], [75.9, 1925.0], [76.0, 1939.0], [76.1, 1944.0], [76.2, 1947.0], [76.3, 1952.0], [76.4, 1956.0], [76.5, 1956.0], [76.6, 1961.0], [76.7, 1963.0], [76.8, 1967.0], [76.9, 1968.0], [77.0, 1970.0], [77.1, 1971.0], [77.2, 1973.0], [77.3, 1976.0], [77.4, 1976.0], [77.5, 1979.0], [77.6, 1982.0], [77.7, 1986.0], [77.8, 1991.0], [77.9, 2001.0], [78.0, 2010.0], [78.1, 2010.0], [78.2, 2012.0], [78.3, 2015.0], [78.4, 2015.0], [78.5, 2020.0], [78.6, 2024.0], [78.7, 2025.0], [78.8, 2025.0], [78.9, 2028.0], [79.0, 2033.0], [79.1, 2033.0], [79.2, 2038.0], [79.3, 2038.0], [79.4, 2039.0], [79.5, 2040.0], [79.6, 2044.0], [79.7, 2044.0], [79.8, 2045.0], [79.9, 2046.0], [80.0, 2048.0], [80.1, 2048.0], [80.2, 2049.0], [80.3, 2050.0], [80.4, 2053.0], [80.5, 2054.0], [80.6, 2055.0], [80.7, 2056.0], [80.8, 2060.0], [80.9, 2060.0], [81.0, 2061.0], [81.1, 2062.0], [81.2, 2064.0], [81.3, 2065.0], [81.4, 2068.0], [81.5, 2070.0], [81.6, 2070.0], [81.7, 2071.0], [81.8, 2072.0], [81.9, 2072.0], [82.0, 2073.0], [82.1, 2077.0], [82.2, 2077.0], [82.3, 2078.0], [82.4, 2080.0], [82.5, 2085.0], [82.6, 2091.0], [82.7, 2094.0], [82.8, 2094.0], [82.9, 2101.0], [83.0, 2102.0], [83.1, 2102.0], [83.2, 2104.0], [83.3, 2106.0], [83.4, 2116.0], [83.5, 2121.0], [83.6, 2122.0], [83.7, 2123.0], [83.8, 2124.0], [83.9, 2128.0], [84.0, 2132.0], [84.1, 2133.0], [84.2, 2135.0], [84.3, 2139.0], [84.4, 2141.0], [84.5, 2141.0], [84.6, 2143.0], [84.7, 2143.0], [84.8, 2144.0], [84.9, 2145.0], [85.0, 2146.0], [85.1, 2146.0], [85.2, 2147.0], [85.3, 2150.0], [85.4, 2151.0], [85.5, 2152.0], [85.6, 2152.0], [85.7, 2154.0], [85.8, 2155.0], [85.9, 2157.0], [86.0, 2162.0], [86.1, 2163.0], [86.2, 2163.0], [86.3, 2163.0], [86.4, 2164.0], [86.5, 2166.0], [86.6, 2168.0], [86.7, 2171.0], [86.8, 2171.0], [86.9, 2175.0], [87.0, 2175.0], [87.1, 2176.0], [87.2, 2177.0], [87.3, 2178.0], [87.4, 2178.0], [87.5, 2180.0], [87.6, 2182.0], [87.7, 2183.0], [87.8, 2184.0], [87.9, 2184.0], [88.0, 2187.0], [88.1, 2187.0], [88.2, 2187.0], [88.3, 2187.0], [88.4, 2188.0], [88.5, 2190.0], [88.6, 2194.0], [88.7, 2195.0], [88.8, 2196.0], [88.9, 2196.0], [89.0, 2199.0], [89.1, 2200.0], [89.2, 2201.0], [89.3, 2201.0], [89.4, 2202.0], [89.5, 2206.0], [89.6, 2206.0], [89.7, 2209.0], [89.8, 2211.0], [89.9, 2211.0], [90.0, 2212.0], [90.1, 2214.0], [90.2, 2217.0], [90.3, 2217.0], [90.4, 2219.0], [90.5, 2219.0], [90.6, 2223.0], [90.7, 2226.0], [90.8, 2226.0], [90.9, 2230.0], [91.0, 2230.0], [91.1, 2233.0], [91.2, 2241.0], [91.3, 2245.0], [91.4, 2254.0], [91.5, 2268.0], [91.6, 2273.0], [91.7, 2275.0], [91.8, 2278.0], [91.9, 2279.0], [92.0, 2283.0], [92.1, 2284.0], [92.2, 2299.0], [92.3, 2299.0], [92.4, 2302.0], [92.5, 2313.0], [92.6, 2321.0], [92.7, 2328.0], [92.8, 2333.0], [92.9, 2337.0], [93.0, 2338.0], [93.1, 2338.0], [93.2, 2353.0], [93.3, 2358.0], [93.4, 2359.0], [93.5, 2360.0], [93.6, 2375.0], [93.7, 2375.0], [93.8, 2379.0], [93.9, 2380.0], [94.0, 2382.0], [94.1, 2383.0], [94.2, 2388.0], [94.3, 2389.0], [94.4, 2395.0], [94.5, 2398.0], [94.6, 2399.0], [94.7, 2399.0], [94.8, 2400.0], [94.9, 2402.0], [95.0, 2406.0], [95.1, 2407.0], [95.2, 2411.0], [95.3, 2412.0], [95.4, 2413.0], [95.5, 2420.0], [95.6, 2421.0], [95.7, 2425.0], [95.8, 2429.0], [95.9, 2430.0], [96.0, 2440.0], [96.1, 2454.0], [96.2, 2456.0], [96.3, 2456.0], [96.4, 2461.0], [96.5, 2462.0], [96.6, 2472.0], [96.7, 2472.0], [96.8, 2485.0], [96.9, 2496.0], [97.0, 2501.0], [97.1, 2513.0], [97.2, 2517.0], [97.3, 2518.0], [97.4, 2524.0], [97.5, 2524.0], [97.6, 2527.0], [97.7, 2532.0], [97.8, 2540.0], [97.9, 2544.0], [98.0, 2549.0], [98.1, 2555.0], [98.2, 2559.0], [98.3, 2567.0], [98.4, 2573.0], [98.5, 2574.0], [98.6, 2585.0], [98.7, 2610.0], [98.8, 2617.0], [98.9, 2623.0], [99.0, 2640.0], [99.1, 2641.0], [99.2, 2652.0], [99.3, 2669.0], [99.4, 2690.0], [99.5, 2697.0], [99.6, 2700.0], [99.7, 2701.0], [99.8, 2706.0], [99.9, 2739.0]], "isOverall": false, "label": "JDBC Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 133.0, "series": [{"data": [[0.0, 95.0], [600.0, 52.0], [700.0, 34.0], [800.0, 16.0], [900.0, 11.0], [1000.0, 63.0], [1100.0, 34.0], [1200.0, 18.0], [1300.0, 17.0], [1400.0, 7.0], [1500.0, 133.0], [100.0, 29.0], [1600.0, 67.0], [1700.0, 43.0], [1800.0, 21.0], [1900.0, 30.0], [2000.0, 50.0], [2100.0, 62.0], [2200.0, 33.0], [2300.0, 24.0], [2400.0, 22.0], [2500.0, 17.0], [2600.0, 9.0], [2700.0, 4.0], [200.0, 16.0], [300.0, 32.0], [400.0, 31.0], [500.0, 30.0]], "isOverall": false, "label": "JDBC Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 30.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 858.0, "series": [{"data": [[0.0, 30.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 69.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 43.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 858.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 462.4559999999999, "minX": 1.6321236E12, "maxY": 462.4559999999999, "series": [{"data": [[1.6321236E12, 462.4559999999999]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6321236E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 2739.0, "series": [{"data": [[4.0, 2671.0], [5.0, 1661.0], [6.0, 2641.0], [7.0, 2230.0], [10.0, 2539.5], [11.0, 2146.0], [13.0, 2362.0], [14.0, 1661.0], [15.0, 1685.0], [16.0, 1656.0], [17.0, 1704.0], [21.0, 2203.5], [22.0, 2202.0], [25.0, 2193.5], [27.0, 1693.6666666666667], [30.0, 2219.0], [31.0, 1952.5], [32.0, 2206.0], [35.0, 1561.6666666666667], [37.0, 1677.0], [36.0, 794.0], [39.0, 1497.5], [40.0, 789.0], [43.0, 1711.0], [42.0, 1248.5], [45.0, 888.5], [46.0, 1719.0], [49.0, 2195.6666666666665], [50.0, 1679.0], [53.0, 1842.6666666666667], [55.0, 794.0], [54.0, 2188.0], [57.0, 794.0], [56.0, 1675.0], [58.0, 2226.0], [61.0, 1289.5], [60.0, 1710.0], [63.0, 1713.0], [62.0, 1703.0], [67.0, 1753.3333333333333], [64.0, 1709.0], [71.0, 2739.0], [70.0, 1774.0], [69.0, 2557.0], [75.0, 2669.0], [74.0, 2166.5], [72.0, 2456.0], [79.0, 1630.0], [78.0, 1992.0], [76.0, 1773.0], [83.0, 1759.0], [82.0, 1464.0], [84.0, 1684.0], [163.0, 1154.6666666666667], [160.0, 2339.5], [175.0, 2472.0], [174.0, 752.0], [173.0, 2471.0], [172.0, 2054.0], [169.0, 2501.5], [168.0, 2375.0], [183.0, 1661.0], [179.0, 2400.5], [177.0, 2353.0], [176.0, 2194.0], [191.0, 2054.0], [188.0, 1665.0], [187.0, 2038.0], [184.0, 1594.0], [199.0, 2040.3333333333333], [198.0, 2217.0], [197.0, 1579.0], [196.0, 1547.0], [192.0, 2413.0], [206.0, 2383.0], [205.0, 2040.0], [203.0, 1655.0], [201.0, 1586.0], [215.0, 2187.0], [212.0, 2397.5], [208.0, 1589.0], [223.0, 2487.0], [220.0, 2421.0], [230.0, 1671.0], [229.0, 2143.0], [227.0, 1688.0], [224.0, 1634.5], [239.0, 2152.5], [237.0, 1857.0], [235.0, 1859.5], [232.0, 1867.0], [246.0, 2163.0], [244.0, 1566.0], [242.0, 2429.0], [252.0, 2407.0], [251.0, 2284.0], [268.0, 1177.0], [265.0, 2152.0], [270.0, 1175.0], [285.0, 1707.4285714285713], [282.0, 2051.4444444444443], [280.0, 2061.1481481481487], [279.0, 1917.3333333333333], [277.0, 1583.0], [276.0, 2321.0], [283.0, 1653.8], [284.0, 1723.5882352941176], [298.0, 1836.5], [292.0, 1563.0], [296.0, 2077.0], [289.0, 1559.0], [318.0, 2245.0], [319.0, 1237.0], [317.0, 1495.0], [306.0, 1737.2837837837835], [304.0, 1597.0], [315.0, 2337.0], [314.0, 2133.0], [313.0, 2226.0], [312.0, 2072.0], [311.0, 2230.0], [310.0, 1755.5], [308.0, 2159.5], [332.0, 1656.0], [335.0, 2241.0], [334.0, 2116.0], [333.0, 2060.0], [329.0, 1709.0], [327.0, 2122.0], [322.0, 2223.0], [321.0, 2217.0], [326.0, 1363.0], [325.0, 2338.0], [324.0, 1290.5], [350.0, 2114.6666666666665], [348.0, 1636.6363636363635], [364.0, 1880.25], [367.0, 1976.0], [366.0, 1741.0], [365.0, 2268.0], [363.0, 2161.0], [358.0, 1159.0], [352.0, 2187.0], [357.0, 1162.0], [356.0, 2098.5], [354.0, 1280.5], [353.0, 1678.5], [380.0, 1730.4], [383.0, 772.0], [382.0, 1939.0], [381.0, 1826.0], [375.0, 1927.0], [369.0, 1231.0], [368.0, 1219.0], [373.0, 1973.0], [372.0, 1155.0], [371.0, 2064.0], [370.0, 2050.0], [397.0, 1156.0], [398.0, 1092.0], [396.0, 1618.0], [387.0, 1952.0], [386.0, 2128.0], [385.0, 1255.0], [384.0, 1260.0], [395.0, 1244.0], [394.0, 2144.0], [393.0, 1785.0], [392.0, 2080.5], [390.0, 765.0], [389.0, 803.0], [388.0, 2078.0], [415.0, 1088.0], [414.0, 2151.0], [412.0, 1898.6], [410.0, 1105.0], [406.0, 1747.6666666666667], [405.0, 1365.0], [404.0, 1236.0], [402.0, 1771.0], [428.0, 1562.0], [430.0, 1753.6666666666667], [431.0, 1903.0], [429.0, 1094.0], [426.0, 2101.0], [425.0, 2009.0], [423.0, 1663.5], [418.0, 1922.0], [421.0, 1231.0], [420.0, 921.0], [446.0, 2025.0], [447.0, 1614.0], [445.0, 1552.5], [435.0, 2139.0], [434.0, 2135.0], [433.0, 1915.0], [432.0, 1979.0], [443.0, 732.0], [442.0, 2035.0], [440.0, 2094.0], [439.0, 1081.0], [438.0, 2070.0], [437.0, 1892.5], [463.0, 753.0], [461.0, 1026.75], [459.0, 986.6666666666667], [458.0, 830.0], [457.0, 277.69767441860466], [454.0, 441.5], [453.0, 713.0], [452.0, 1276.0], [455.0, 1096.0], [448.0, 1864.0], [450.0, 1605.0], [449.0, 1922.0], [451.0, 284.5], [462.0, 1093.0], [456.0, 1612.0], [467.0, 460.6666666666667], [479.0, 959.0], [472.0, 1087.0], [478.0, 401.5], [476.0, 873.0], [477.0, 1575.0], [474.0, 727.75], [473.0, 1395.0], [471.0, 535.6666666666667], [470.0, 743.0], [469.0, 2106.0], [468.0, 1084.0], [465.0, 873.6666666666666], [466.0, 2024.0], [464.0, 752.0], [483.0, 794.0], [490.0, 322.28571428571433], [491.0, 1991.5], [489.0, 999.8333333333333], [488.0, 486.5], [485.0, 219.0], [487.0, 339.5], [484.0, 692.0], [482.0, 833.0], [481.0, 355.0], [480.0, 207.0], [495.0, 1679.0], [494.0, 664.0], [493.0, 1567.0], [492.0, 1563.0], [510.0, 1037.0], [508.0, 1229.25], [504.0, 658.0], [503.0, 1539.0], [502.0, 1883.0], [499.0, 1106.5], [497.0, 691.0], [496.0, 657.0], [542.0, 445.6666666666667], [543.0, 465.5], [529.0, 1550.0], [540.0, 112.0], [539.0, 1031.0], [538.0, 1557.0], [537.0, 636.0], [536.0, 1093.0], [517.0, 1378.0], [516.0, 1559.5], [515.0, 1970.0], [514.0, 1036.0], [525.0, 1156.0], [524.0, 1039.0], [523.0, 1286.0], [521.0, 1251.3333333333333], [520.0, 2028.0], [535.0, 1093.5], [530.0, 1542.0], [569.0, 667.0], [573.0, 1209.0], [572.0, 1030.5], [570.0, 665.0], [568.0, 1032.0], [550.0, 2080.0], [549.0, 1038.0], [548.0, 1035.0], [547.0, 105.0], [546.0, 1034.0], [566.0, 1058.0], [562.0, 97.0], [559.0, 1095.0], [558.0, 1024.0], [557.0, 1031.0], [556.0, 1027.0], [555.0, 1529.0], [554.0, 1541.0], [552.0, 818.0], [603.0, 660.0], [593.0, 1043.0], [605.0, 1145.0], [607.0, 1630.4], [592.0, 660.0], [604.0, 1901.0], [601.0, 1401.75], [583.0, 1339.5], [581.0, 665.0], [580.0, 657.0], [579.0, 1528.5], [577.0, 1864.0], [591.0, 1492.6666666666667], [589.0, 1636.0], [586.0, 1754.5], [585.0, 1037.0], [584.0, 1081.0], [596.0, 1454.5], [595.0, 2010.0], [594.0, 1376.0], [627.0, 1833.0], [637.0, 2060.0], [639.0, 1394.75], [625.0, 1743.5], [624.0, 1357.0], [636.0, 1647.0], [635.0, 1791.5], [633.0, 1064.0], [612.0, 1812.5], [611.0, 1226.0], [610.0, 2015.0], [623.0, 1272.5], [622.0, 2038.0], [619.0, 1437.0], [616.0, 1644.0], [631.0, 1229.3333333333333], [629.0, 1904.0], [628.0, 1069.0], [643.0, 62.0], [642.0, 62.0], [641.0, 598.0], [640.0, 1820.0], [703.0, 1569.0], [694.0, 903.0], [700.0, 1029.0], [699.0, 1032.0], [698.0, 317.0], [691.0, 1961.0], [690.0, 1911.5], [689.0, 50.0], [687.0, 875.0], [685.0, 1033.0], [684.0, 48.0], [732.0, 1411.0], [735.0, 1044.0], [729.0, 1181.5714285714284], [728.0, 915.3529411764706], [727.0, 472.5], [726.0, 1034.0], [724.0, 1534.0], [721.0, 1680.0], [718.0, 923.074074074074], [706.0, 1548.0], [709.0, 1699.0], [707.0, 1617.5], [711.0, 962.0], [710.0, 1845.0], [717.0, 876.0], [715.0, 1540.0], [714.0, 679.0], [720.0, 982.0], [734.0, 1680.0], [730.0, 874.0], [762.0, 1310.0], [756.0, 278.8], [763.0, 697.6666666666666], [752.0, 240.5], [761.0, 494.0], [760.0, 494.0], [751.0, 478.0], [750.0, 4.0], [736.0, 1240.0], [738.0, 1061.0], [737.0, 1632.0], [741.0, 1218.0], [740.0, 1716.0], [739.0, 1302.0], [743.0, 572.2727272727274], [742.0, 734.25], [749.0, 389.0], [748.0, 850.3333333333334], [747.0, 33.333333333333336], [746.0, 641.6326530612245], [745.0, 503.75], [744.0, 513.3333333333334], [759.0, 471.0], [758.0, 216.11111111111111], [757.0, 187.99999999999997], [755.0, 277.4], [754.0, 515.0], [753.0, 348.4], [1.0, 2640.0]], "isOverall": false, "label": "JDBC Request", "isController": false}, {"data": [[456.2049999999998, 1286.5159999999996]], "isOverall": false, "label": "JDBC Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 763.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.6321236E12, "maxY": 1520.0333333333333, "series": [{"data": [[1.6321236E12, 1520.0333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6321236E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6321236E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1286.5159999999996, "minX": 1.6321236E12, "maxY": 1286.5159999999996, "series": [{"data": [[1.6321236E12, 1286.5159999999996]], "isOverall": false, "label": "JDBC Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6321236E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 159.6030000000001, "minX": 1.6321236E12, "maxY": 159.6030000000001, "series": [{"data": [[1.6321236E12, 159.6030000000001]], "isOverall": false, "label": "JDBC Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6321236E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1284.585, "minX": 1.6321236E12, "maxY": 1284.585, "series": [{"data": [[1.6321236E12, 1284.585]], "isOverall": false, "label": "JDBC Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6321236E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 264.0, "minX": 1.6321236E12, "maxY": 2501.0, "series": [{"data": [[1.6321236E12, 2501.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6321236E12, 2157.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6321236E12, 2430.909999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6321236E12, 2242.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6321236E12, 264.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6321236E12, 1023.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6321236E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 307.5, "minX": 114.0, "maxY": 1778.0, "series": [{"data": [[639.0, 1778.0], [247.0, 511.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[639.0, 1656.0], [114.0, 307.5], [247.0, 625.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 639.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 114.0, "maxY": 1778.0, "series": [{"data": [[639.0, 1778.0], [247.0, 511.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[639.0, 0.0], [114.0, 0.0], [247.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 639.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.6321236E12, "maxY": 16.666666666666668, "series": [{"data": [[1.6321236E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6321236E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.3666666666666667, "minX": 1.6321236E12, "maxY": 14.3, "series": [{"data": [[1.6321236E12, 2.3666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6321236E12, 14.3]], "isOverall": false, "label": "null 0", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6321236E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.3666666666666667, "minX": 1.6321236E12, "maxY": 14.3, "series": [{"data": [[1.6321236E12, 14.3]], "isOverall": false, "label": "JDBC Request-failure", "isController": false}, {"data": [[1.6321236E12, 2.3666666666666667]], "isOverall": false, "label": "JDBC Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6321236E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.3666666666666667, "minX": 1.6321236E12, "maxY": 14.3, "series": [{"data": [[1.6321236E12, 2.3666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6321236E12, 14.3]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6321236E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

